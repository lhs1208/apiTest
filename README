
- 소개

* 이 프로젝트는 매일 자정 특정 경로의 파일을 읽어 정보를 추출하고, 데이터베이스에 저장하는 스케줄러와 RESTful API 서버를 구현한 프로젝트입니다. 
  주요 기능은 다음과 같습니다

1. 스케줄러 기능
- CSV 파일 형식의 데이터를 읽어 데이터베이스에 저장.
- 파일 전체를 읽어 처리하며, 파일 내 오류 발생 시 해당 파일의 데이터는 저장하지 않음.
- 시간대별 데이터(가입자수, 탈퇴자수, 결제금액, 사용금액, 매출금액)를 관리.

2. API 서버
- 시간대별 가입자 수, 결제 금액 등 데이터를 조회, 등록, 수정, 삭제하는 RESTful API 제공.
- 요청 및 응답 시간, 처리 시간 등을 로그로 기록하며, API 접근은 설정 파일에 등록된 허용된 IP만 가능.
- 유효성 검증 및 공통 예외 처리를 통해 안정적인 데이터 처리 제공.

3. 보안 및 호출 제한
- Client 인증을 통해 API 호출자의 신뢰성을 검증.
- Rate Limit 기능으로 과도한 호출 방지.

4. 유지 보수 및 확장성 고려
- 로그와 설정 파일 기반의 접근 제어로 향후 운영 및 확장성을 보장.



- 테스트 방법

* 내장 톰캣이 있는 툴에서 spring boot을 사용해서 import 받은 뒤에 start

1. upload 방법
postman에서 post로 놓고 아래 경로를 실행한다.
http://localhost:8080/transactions/upload?(data 폴더의 경로를 복사)
ex) http://localhost:8080/transactions/upload?filePath=D:/intelliJ/gitIntelli/apiTestdata/sample.csv

2. 데이터확인 작업
1번 실행 이후 postman에서 get으로 놓고
http://localhost:8080/transactions
실행하면 정상적으로 나오는 것 확인한다.

3. 수정 방법
postman에서 put으로 놓은 뒤에
body 안에 아래 데이터를 입력
{
"id": 1,
"time": "2024-11-20 12:00",
"subscribers": 40,
"unsubscribers": 5,
"paymentAmount": "50123123000",
"usageAmount": "30012312300",
"salesAmount": "100012312300"
}

http://localhost:8080/transactions/(수정할 id 값)
ex) http://localhost:8080/transactions/1
실행한 다음 2번을 실행하여 정상적으로 수정되었는지 확인한다.

4. 삭제 방법
postman에서 delete로 놓고
http://localhost:8080/transactions/(삭제할 id 값)
ex) http://localhost:8080/transactions/1
실행한다.

5. RateLimitingFilter 테스트 방법
new Collection에 get으로 놓고
http://localhost:8080/transactions 추가한다.
그다음 scripts에서 post-response에 아래 로그를 추가한다.
pm.test("Status code is 200 or 429", function () {
pm.response.to.have.status.oneOf([200, 429]);
});

pm.test("Response time is within limit", function () {
pm.expect(pm.response.responseTime).to.be.below(500); // 응답 시간 500ms 이하
});

runner에서 20개 이상을 실행하여서 동작 여부 파악한다.

6. IP 방화벽 확인
application.properties에서 지정된 아이피를 다른 아이피로 놓고 테스트 한다.

7. 로그 확인 방법
import 된 프로젝트에 log가 잘 생성되는지 확인한다.
